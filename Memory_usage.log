Filename: d:\Maestria\semestre 3\Incertidumbre en IA\proyecto_1\navigator.py

Line #    Mem usage    Increment  Occurences   Line Contents
============================================================
   185     72.2 MiB     72.2 MiB           1       @profile(stream=open('Memory_usage.log','w+', encoding='utf-8'))
   186                                             def iteration_value_alg(self,grafo,delta=0.01):
   187                                                 
   188     72.2 MiB      0.0 MiB           1           start_time = time.time()
   189                                         
   190                                                 # Inicializamos los nodos con el metodo
   191     72.2 MiB      0.0 MiB           1           v_nodes = self.initialization(grafo)
   192                                         
   193                                                 # Almacenamos los nodos iniciales en el diccionario de resultados
   194     72.2 MiB      0.0 MiB           1           self.iv_result['node_init_values'] = copy.deepcopy(v_nodes)
   195                                         
   196                                                 # Definimos variables
   197     72.2 MiB      0.0 MiB           1           table = [] # Almacena todos los valores que se van calculando para cada estado
   198     72.2 MiB      0.0 MiB           1           table_arrows = [] # Almacena todos las direcciones que se van calculando para cada estado
   199     72.2 MiB      0.0 MiB           1           arrows_dict = {0:'↑', 1:'↓', 2:'→', 3:'←'} # Diccionario para traducir las direccones
   200     72.2 MiB      0.0 MiB           1           _delta = np.inf
   201     72.2 MiB      0.0 MiB           1           iteracion = 0 # Contador para las iteraciones
   202                                                 
   203                                                 # Agregamos a la tabla de resultados los valores de inicializacion de los estados
   204     72.2 MiB      0.0 MiB           1           table.append(list(v_nodes.values()))
   205                                         
   206                                                 # Algoritmo iteracion de valor
   207     72.4 MiB      0.0 MiB          42           while True:
   208     72.4 MiB      0.0 MiB          42               path = []
   209     72.4 MiB      0.0 MiB          42               arrows = []
   210     72.4 MiB      0.0 MiB          42               current_values = list(v_nodes.values())
   211     72.4 MiB      0.0 MiB        1974               for key, value in v_nodes.items():
   212     72.4 MiB      0.0 MiB        1932                   v_nodes[key], direction, next_node = self.calculate_node_value(str(key),v_nodes,grafo)
   213     72.4 MiB      0.1 MiB        1932                   path.append((direction, next_node))
   214     72.4 MiB      0.0 MiB        1932                   arrows.append(arrows_dict[direction])
   215     72.4 MiB      0.0 MiB          42               _delta = np.abs(np.array(current_values)-np.array(list(v_nodes.values())))
   216     72.4 MiB      0.0 MiB          42               table.append(list(v_nodes.values()))
   217     72.4 MiB      0.0 MiB          42               table_arrows.append(arrows)
   218     72.4 MiB      0.0 MiB          42               iteracion += 1
   219                                         
   220     72.4 MiB      0.0 MiB          42               if max(_delta[:-1]) < delta:
   221     72.4 MiB      0.0 MiB           1                   break
   222                                                 
   223     72.4 MiB      0.0 MiB           1           end_time = time.time()
   224                                         
   225     72.4 MiB      0.0 MiB           1           nodo_inicial = int(grafo.start) - 1
   226                                         
   227     72.4 MiB      0.0 MiB           1           self.iv_result['path'] = self.decode_path(grafo.goal,path,nodo_inicial)
   228     72.4 MiB      0.0 MiB           1           self.iv_result['table_values'] = np.array(table)
   229     72.4 MiB      0.0 MiB           1           self.iv_result['table_arrows'] = np.array(table_arrows)
   230     72.4 MiB      0.0 MiB           1           self.iv_result['num_iterations'] = iteracion
   231     72.4 MiB      0.0 MiB           1           self.iv_result['total_time'] = end_time - start_time
   232                                         
   233                                                 # return self.iv_result


